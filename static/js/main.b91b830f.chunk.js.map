{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","flexDirection","backgroundColor","color","height","maxWidth","padding","fontSize","moment","fromNow","split","justifyContent","flexWrap","marginBetween","wrapMargin","href","alignItems","size","icon","faFile","faMapMarkedAlt","faImages","flexGrow","faGithub","faLinkedin","faFacebook","faTwitter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b91b830f.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport './index.css';\nimport {\n  faFile,\n  faMapMarkedAlt,\n  faImages,\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  faGithub,\n  faLinkedin,\n  faFacebook,\n  faTwitter,\n} from '@fortawesome/free-brands-svg-icons';\nimport { Flexbox, Text, Link, Icon, Spacer } from 'kvl-ui';\n\nfunction App() {\n  return (\n    <Flexbox\n      flexDirection=\"column\"\n      backgroundColor=\"#282c34\"\n      color=\"#eee\"\n      height=\"100%\"\n    >\n      <Flexbox\n        flexDirection=\"column\"\n        backgroundColor=\"#282c34\"\n        maxWidth=\"80ch\"\n        padding=\"1em 1em 0 1em\"\n        height=\"100%\"\n      >\n        <Text fontSize=\"title\">kevinvanleer.com</Text>\n        <Spacer height=\"1em\" />\n        <Text>\n          Hi, I’m Kevin Van Leer, husband, father of three, and\n          do-it-yourselfer. I love working with my hands and creating beautiful\n          and useful things and experiences. Whether I’m at the keyboard,\n          playing my saxophone, or down in the woodshop, I get great\n          satisfaction out of seeing my ideas come to fruition.\n        </Text>\n        <Spacer height=\"1em\" />\n        <Text>\n          I’ve been writing software for {moment('2004-06-12').fromNow(true)}{' '}\n          and leading software teams for{' '}\n          {moment('2008').fromNow(true).split(' ')[0]}. I’m passionate about\n          beautiful, easy-to-use software, as much as I am about\n          well-structured, easy-to-read code. I’m an advocate for Agile software\n          development principles, automated testing, and continuous integration\n          and deployment. I enjoy leading teams, coaching, mentoring, and\n          inspiring colleagues to be their best. I believe collaboration and\n          transparency are key traits of a highly functioning team, and that\n          straightforward honest communication is the best way to gain the\n          respect and trust of those around you.\n        </Text>\n        <Spacer height=\"2em\" />\n        <Text fontSize=\"heading\">Links</Text>\n        <Spacer height=\"1em\" />\n        <Flexbox\n          justifyContent=\"space-around\"\n          flexWrap=\"wrap\"\n          marginBetween=\"1em\"\n          wrapMargin=\"1em\"\n        >\n          <Link href=\"/resume\">\n            <Flexbox flexDirection=\"column\" alignItems=\"center\">\n              <Icon size=\"10x\" icon={faFile} />\n              <Spacer height=\"1em\" />\n              <Text fontSize=\"label\">Resume</Text>\n            </Flexbox>\n          </Link>\n          <Link href=\"http://covid19.kevinvanleer.com\">\n            <Flexbox flexDirection=\"column\" alignItems=\"center\">\n              <Icon size=\"10x\" icon={faMapMarkedAlt} />\n              <Spacer height=\"1em\" />\n              <Text fontSize=\"label\">COVID-19</Text>\n              <Text fontSize=\"label\">Visualization</Text>\n            </Flexbox>\n          </Link>\n          <Link href=\"https://photos.app.goo.gl/ZEwJhPfaTAxpCdED8\">\n            <Flexbox flexDirection=\"column\" alignItems=\"center\">\n              <Icon size=\"10x\" icon={faImages} />\n              <Spacer height=\"1em\" />\n              <Text fontSize=\"label\">Woodworking</Text>\n            </Flexbox>\n          </Link>\n        </Flexbox>\n        <Spacer flexGrow={1} height=\"3em\" />\n        <Flexbox marginBetween=\"1em\">\n          <Link href=\"https://github.com/kevinvanleer/\">\n            <Flexbox flexDirection=\"column\" alignItems=\"center\">\n              <Icon size=\"2x\" icon={faGithub} />\n              <Spacer height=\"1em\" />\n              <Text fontSize=\"detail\">GitHub</Text>\n            </Flexbox>\n          </Link>\n          <Link href=\"https://www.linkedin.com/in/kevin-vanleer/\">\n            <Flexbox flexDirection=\"column\" alignItems=\"center\">\n              <Icon size=\"2x\" icon={faLinkedin} />\n              <Spacer height=\"1em\" />\n              <Text fontSize=\"detail\">LinkedIn</Text>\n            </Flexbox>\n          </Link>\n          <Link href=\"https://www.facebook.com/kevin.vanleer\">\n            <Flexbox flexDirection=\"column\" alignItems=\"center\">\n              <Icon size=\"2x\" icon={faFacebook} />\n              <Spacer height=\"1em\" />\n              <Text fontSize=\"detail\">Facebook</Text>\n            </Flexbox>\n          </Link>\n          <Link href=\"https://www.twitter.com/trukvl\">\n            <Flexbox flexDirection=\"column\" alignItems=\"center\">\n              <Icon size=\"2x\" icon={faTwitter} />\n              <Spacer height=\"1em\" />\n              <Text fontSize=\"detail\">Twitter</Text>\n            </Flexbox>\n          </Link>\n        </Flexbox>\n        <Spacer height=\"1em\" />\n      </Flexbox>\n    </Flexbox>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}